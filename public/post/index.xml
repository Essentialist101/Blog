<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HCZ-Blog</title>
    <link>https://hcz.netlify.app/post/</link>
    <description>Recent content in Posts on HCZ-Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hcz.netlify.app/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Learning</title>
      <link>https://hcz.netlify.app/post/2022-03-19-git-learning/</link>
      <pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hcz.netlify.app/post/2022-03-19-git-learning/</guid>
      <description>Git工作流程1.克隆 Git 资源作为工作目录。
2.在克隆的资源上添加或修改文件。
3.如果其他人修改了，你可以更新资源。
4.在提交前查看修改。
5.提交修改。
6.在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。
Git基本概念1.工作区：就是你在电脑里能看到的目录。
2.暂存区：英文叫stage或index。一般存放在“.git”目录下的“index”文件中，所以我们把暂存区有时也叫作索引(index)。
3.版本库：工作区有一个隐藏目录“.git”，这个不算工作区，而是Git的版本库。
图中的指令：(1)git add:当对工作区修改（或新增）的文件执行“git add”命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。
(2)git commit:当执行提交操作“git commit”时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。
(3)git reset HEAD:当执行 git reset HEAD 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。
(4)git rm –cached :当执行 git rm –cached  命令时，会直接从暂存区删除文件，工作区则不做出改变。
(5)git checkout:当执行 git checkout . 或者 git checkout –  命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区中的改动。
Git创建仓库(1)git init:使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。在执行完成 git init 命令后，Git 仓库会生成一个 .</description>
    </item>
    
    <item>
      <title>Python Learning</title>
      <link>https://hcz.netlify.app/post/2022-03-19-python-learning/</link>
      <pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hcz.netlify.app/post/2022-03-19-python-learning/</guid>
      <description>一、初识python1.1 python的开发环境python是一门语言，常用IDE（集成开发环境）有pycharm和spyder，网页交互式编译器jupyter。还有一个是anaconda，属于python系列软件的打包软件。
1.2 python的特征python 最具特色的就是用缩进来写模块。缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。比如：
if True:print (&amp;quot;Answer&amp;quot;)print (&amp;quot;True&amp;quot;)else:print (&amp;quot;Answer&amp;quot;)# 没有严格缩进，在执行时会报错print (&amp;quot;False&amp;quot;)Python的小优点（print函数）互换两个数的值可以用以下优雅的代码实现：
x=3y=5x,y=y,x#print输出一个路径可以使用原始字符串或者转义字符print(&amp;quot;D:\\mydata\\notebook.txt&amp;quot;)print(r&amp;quot;D:\mydata\notebook.txt&amp;quot;)#长字符串（也可以用3个单引号，但要前后对应）poetry = &amp;quot;&amp;quot;&amp;quot;面朝大海春暖花开这是一首优美的诗歌&amp;quot;&amp;quot;&amp;quot;print(poetry)转义字符
1.3 python变量类型标准数据类型有：Numbers——数字（整型int与长整型long、浮点型float、复数complex）、String——字符串、List——列表、Tuple——元组、Dictionary——字典
python特有的结构主要是三种：列表、元组与字典。
1.3.1 list列表列表是最常见的一种数据形式，可以把大量地数据放到一起。它是以方括号“[ ]”包围的数据集合，不同成员之间用半角逗号相隔开。列表可以包含任何数据类型，也可以包含一个列表。列表也可以通过序号访问其中的成员。
alist = [&amp;#39;a&amp;#39;,&amp;#39;1&amp;#39;,&amp;#39;b&amp;#39;,2.0]#创建一个包含不同元素的列表alist[2]#访问第三个元素[1,2] + [3,4]#支持加法运算，等于[1,2,3,4][1] * 3#支持乘法运算，等于[1,1,1]python中有多种对列表的操作函数，如下：
list.append(x)#在列表尾部追加成员xlist.count(x)#返回参数x出现的次数list.extend(L)#向列表中追加另一个列表Llist.index(x)#返回参数x在列表中的序号list.insert(index,object)#向列表中指定位置插入数据list.pop()#删除尾部成员并返回被删除的成员list.remove(x)#删除x，多个则只删除第一个list.</description>
    </item>
    
    <item>
      <title>Shiny Learning</title>
      <link>https://hcz.netlify.app/post/2022-03-19-shiny-learning/</link>
      <pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hcz.netlify.app/post/2022-03-19-shiny-learning/</guid>
      <description>Chapter 1：一个简单的例子library(shiny)ui &amp;lt;- fluidPage(selectInput(&amp;quot;dataset&amp;quot;, label = &amp;quot;Dataset&amp;quot;, choices = ls(&amp;quot;package:datasets&amp;quot;)),verbatimTextOutput(&amp;quot;summary&amp;quot;),tableOutput(&amp;quot;table&amp;quot;))server &amp;lt;- function(input, output, session) {output$summary &amp;lt;- renderPrint({dataset &amp;lt;- get(input$dataset, &amp;quot;package:datasets&amp;quot;)summary(dataset)})output$table &amp;lt;- renderTable({dataset &amp;lt;- get(input$dataset, &amp;quot;package:datasets&amp;quot;)dataset})}shinyApp(ui, server)Shiny app有两部分：用户交互脚本ui、服务器脚本server。
Notes:
1、fluidPage() 是一个布局函数，用于设置页面的基本视觉结构。它将展示一个自动调整组件尺寸大小来适应浏览器。
2、selectInput() 是一个输入控件，它允许用户通过提供一个值来与应用程序进行交互。在这种情况下，它是一个带有“数据集”标签的选择框，可让您选择 R 附带的内置数据集之一。
3、verbatimTextOutput() 和 tableOutput() 是输出控件，它们告诉 Shiny 将渲染输出放在哪里（我们稍后会介绍如何）。 verbatimTextOutput() 显示代码，tableOutput() 显示表格。
以上为写一个脚本的简单例子，但一般而言把ui与server分别放在不同的脚本比较好，以下给出建立步骤：
建立一个shiny app：
1、为app创建一个文件夹.
2、app’s server.R and ui.R 脚本放在文件夹之下</description>
    </item>
    
  </channel>
</rss>
